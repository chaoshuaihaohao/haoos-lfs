#!/bin/bash
set -e
#
if [ `id -u` != 0 ];then
        echo Permission delay, Please run as root!
        exit
fi

if [ -n $JOBS ];then
        JOBS=`grep -c ^processor /proc/cpuinfo 2 > /dev/null`
        if [ ! $JOBS ];then
                JOBS="1"
        fi
fi
export MAKEFLAGS=-j$JOBS

export SHELL=/bin/bash
export QT5PREFIX=/opt/qt5
export PYTHONDOCS=/usr/share/doc/python-3/html
export PKG_PATH=unit
export BLFS_SRC_DIR=/sources/blfs-sources
export XORG_PREFIX="/usr"
export XORG_CONFIG="--prefix=$XORG_PREFIX --sysconfdir=/etc \
    --localstatedir=/var --disable-static"

usage()
{
	echo "Usage: $0 [option] [args]"
	echo "        不带参数:安装所有软件包"
	echo "	-f ,	--file:下载软件包"
	echo "	-d ,	--download:下载软件包"
	echo "	-i ,	--install:安装单个软件包"
}

install-pkg()
{
#检测pkg必要文件
if [ ! -e $PKG_PATH/$1.info ];then
	echo Not exist $1.info, please create it!
	exit
fi

if [ ! -e $PKG_PATH/$1.cmd ];then
	echo Not exist $PKG_PATH/$1.cmd, please create it!
	exit
fi

#安装有依赖的软件包
if [ -e $PKG_PATH/$1.dep ];then
	for depend_pkg in `cat $PKG_PATH/$1.dep`
	do
		set +e
		grep -w "^$depend_pkg$" /haoos/LIST > /dev/null
		if [ $? != 0 ];then
			set -e
			install-pkg $depend_pkg
		fi
		set -e
	done
fi

#如果已经安装过，则无需再次安装
set +e
grep -w "^$1$" /haoos/LIST > /dev/null
if [ $? != 0 ];then
	set -e

	exec_cmd $1
#	echo $1.cmd
fi
set -e
}

exec_cmd()
{
set +e
#获取软件包url的第一行的压缩包名，从而得到软件包解压后的目录名。
compressed_pkg_name=`grep Download $PKG_PATH/$1.info | head -1| awk -F '/' '{print $NF}'`
if [ $1 = llvm ];then
  pkg_dir=`echo $compressed_pkg_name | awk -F '\\\.tar' '{print $1}' | awk -F '\\\.tgz' '{print $1}'| awk -F '\\\.zip' '{print $1}'`
elif [ $1 = js ];then
  pkg_dir=`echo $compressed_pkg_name | awk -F 'esr' '{print $1}'`
elif [ $1 = icu ];then
  pkg_dir=icu
elif [ $1 = "cdrkit-release" ];then
  pkg_dir=cdrkit-release_1.1.11
elif [ $1 = "libyaml" ];then
  pkg_dir=libyaml-0.2.4
elif [ $1 = "tk" ];then
  pkg_dir=tk8.6.11
elif [ $1 = "cups" ];then
  pkg_dir=cups-2.3.3
elif [ $1 = "libaio" ];then
  pkg_dir=libaio-0.3.112
elif [ $1 = "volume_key" ];then
  pkg_dir=volume_key-volume_key-0.3.12
elif [ $1 = "lmdb" ];then
  pkg_dir=lmdb-LMDB_0.9.28
elif [ $1 = "inkscape" ];then
  pkg_dir=inkscape-1.0.2_2021-01-15_e86c870879
elif [ $1 = "firefox" ];then
  pkg_dir=firefox-78.8.0
else
  pkg_dir=`echo $compressed_pkg_name | awk -F '\\\.tar' '{print $1}' | awk -F '\\\.tgz' '{print $1}'| awk -F '\\\.zip' '{print $1}' | awk -F '\\\.src' '{print $1}'`
fi

set -e
	pushd /lfs
	rm -rf $pkg_dir
	#判断压缩包是否存在
	if [ -e $BLFS_SRC_DIR/$compressed_pkg_name ];then
	  #解压缩软件包
	  decompress $BLFS_SRC_DIR/$compressed_pkg_name
	else
	  if [ $1 = gnome-keyring ] || [[ $1 = evolution-data-server ]] || \
		[[ $1 = glib-networking ]] || [[ $1 = json-glib ]] || \
		[[ $1 = alsa-lib ]] || [[ $1 = gst-plugins-base ]] || \
		[[ $1 = gst-plugins-bad ]] || [[ $1 = gst-plugins-good ]] || \
		[[ $1 = little-cms ]] || [[ $1 = xorg-wacom-driver ]] || \
		[[ $1 = fdk-aac ]] || [[ $1 = sdl2 ]] || \
		[[ $1 = startup-notification ]] || [[ $1 = gnome-shell ]] || \
		[[ $1 = dbus-glib ]] || [[ $1 = gconf ]] || \
		[[ $1 = gnome-session ]] || [[ $1 = perl-xml-namespacesupport ]] || \
		[[ $1 = perl-xml-sax-base ]] || [[ $1 = perl-xml-sax ]] || \
		[[ $1 = perl-xml-simple ]] || [[ $1 = perl-xml-sax ]] || \
		[[ $1 = icon-naming-utils ]] || [[ gnome-icon-theme ]] \
	 ;then			# || [[ $1 =  ]]
		  pkg_name=$1
	  else
		  pkg_name=`echo $pkg_dir | awk -F '-' '{print $1}'`
	  fi
	  echo "Not exist $pkg_dir:$pkg_name source packet, try './pkg-install -d $pkg_name' to download it." && exit
	fi
	pushd $pkg_dir

#	. /haoos/$PKG_PATH/$1.cmd && echo $1 >> /haoos/LIST
#	bash -e /haoos/$PKG_PATH/$1.cmd && echo $1 >> /haoos/LIST
	bash -e /haoos/$PKG_PATH/$1.cmd
        if [ $? = 0 ];then
                echo $1 >> /haoos/LIST
        else
                exit
        fi

	popd #$pkg_dir
	rm -rf $pkg_dir
	popd #/lfs
}

decompress()
{
	file_type=`file -b $1 | awk -F ' ' '{print$1}'`
	if [[ $file_type = gzip ]] || [[ $file_type = XZ ]] || [[ $file_type = bzip2 ]] ;then
		tar xf $1 -C /lfs
	elif [ $file_type = Zip ];then
		if [ $1 = /sources/blfs-sources/docbook-xml-4.5.zip ];then
		  mkdir /lfs/docbook-xml-4.5
		  unzip -d /lfs/docbook-xml-4.5 $1
		else
		  unzip -d /lfs $1
		fi
	else
		echo "unknown compressed file $1, type is: $file_type." && exit
	fi
}

#入参检测
#如果没有后缀参数，则安装所有包
if [ -z $1 ];then
  for pkg in `find unit/ -name *.cmd -type f`
  do
	#获取包名
	name=`echo $pkg | awk -F '[./]+' '{print $2}'`
	install-pkg $name
  done
  echo "已完成所有BLFS软件包安装" && exit
fi

if [[ ! -z $1 ]] && [[ ! -z $2 ]];then
	case $1 in
	-f)
		# --file,按顺序安装文件列表中的软件包
		#入参检测
		#如果没有后缀参数，则安装所有包
		  for list_pkg in `cat $2`
		  do
			install-pkg $list_pkg
		  done
		  echo "已完成所有BLFS软件包安装" && exit
	;;
	-d )
		# --download,下载软件包
		if [ $2 = Xorg-Applications ];then
			wget_dir=/sources/blfs-sources/$2
		elif [ $2 = Xorg-Libraries ];then
			wget_dir=/sources/blfs-sources/$2
		elif [ $2 = Xorg-Fonts ];then
			wget_dir=/sources/blfs-sources/$2
		else
			wget_dir=/sources/blfs-sources
		fi

		for pkg_url in `cat $PKG_PATH/$2.info | awk -F ' ' '{print $2}'`
		do
		  set +e
		  wget -P $wget_dir --no-check-certificate -c $pkg_url
		  set -e
	  	done

		if [ $2 = Xorg-Applications ];then
			pushd /sources/blfs-sources
			tar czvf $2.tar.xz $2
			rm -rf $2
			popd
		elif [ $2 = Xorg-Libraries ];then
			pushd /sources/blfs-sources
			tar czvf $2.tar.xz $2
			rm -rf $2
			popd
		elif [ $2 = Xorg-Fonts ];then
			pushd /sources/blfs-sources
			tar czvf $2.tar.xz $2
			rm -rf $2
			popd
		else
			echo donothing > /dev/null
		fi
	;;
	-i)
		# --install,安装单个软件包
		#rm /haoos/LIST
		touch /haoos/LIST
		install-pkg $2
	;;
	*)
		usage
	;;
	esac
else
		usage
fi
